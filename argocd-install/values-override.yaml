global:
  domain: argocd.ctrlplane.net
redis:
  podAnnotations:
    coroot.com/redis-scrape: "true"
    coroot.com/redis-scrape-port: "6379"
    coroot.com/redis-scrape-credentials-secret-name: "argocd-redis"
    coroot.com/redis-scrape-credentials-secret-password-key: "auth"
configs:
  repositories:
    ekwisnek-github:
      name: ekwisnek-github
      type: git
      url: https://github.com/ekwisnek/argocd.git
    argo-helm:
      name: argo-helm
      type: helm
      url: https://argoproj.github.io/argo-helm
  cm:
    dex.config: |
      connectors:
        - type: github
          id: github
          name: GitHub
          config:
            clientID: Ov23liNbywbhrpV42azM
            clientSecret: $dex.github.clientSecret
            orgs:
            - name: ctrlplane
    resource.exclusions: |
        - apiGroups:
          - "*"
          kinds:
          - ProviderConfigUsage
    application.resourceTrackingMethod: annotation
    resource.customizations: |
      "*.upbound.io/*":
        health.lua: |
          health_status = {
            status = "Progressing",
            message = "Provisioning ..."
          }

          local function contains (table, val)
            for i, v in ipairs(table) do
              if v == val then
                return true
              end
            end
            return false
          end

          local has_no_status = {
            "ProviderConfig",
            "ProviderConfigUsage"
          }

          if obj.status == nil or next(obj.status) == nil and contains(has_no_status, obj.kind) then
            health_status.status = "Healthy"
            health_status.message = "Resource is up-to-date."
            return health_status
          end

          if obj.status == nil or next(obj.status) == nil or obj.status.conditions == nil then
            if obj.kind == "ProviderConfig" and obj.status.users ~= nil then
              health_status.status = "Healthy"
              health_status.message = "Resource is in use."
              return health_status
            end
            return health_status
          end

          for i, condition in ipairs(obj.status.conditions) do
            if condition.type == "LastAsyncOperation" then
              if condition.status == "False" then
                health_status.status = "Degraded"
                health_status.message = condition.message
                return health_status
              end
            end

            if condition.type == "Synced" then
              if condition.status == "False" then
                health_status.status = "Degraded"
                health_status.message = condition.message
                return health_status
              end
            end

            if condition.type == "Ready" then
              if condition.status == "True" then
                health_status.status = "Healthy"
                health_status.message = "Resource is up-to-date."
                return health_status
              end
            end
          end

          return health_status

      "*.crossplane.io/*":
        health.lua: |
          health_status = {
            status = "Progressing",
            message = "Provisioning ..."
          }

          local function contains (table, val)
            for i, v in ipairs(table) do
              if v == val then
                return true
              end
            end
            return false
          end

          local has_no_status = {
            "Composition",
            "CompositionRevision",
            "DeploymentRuntimeConfig",
            "ControllerConfig",
            "ProviderConfig",
            "ProviderConfigUsage"
          }
          if obj.status == nil or next(obj.status) == nil and contains(has_no_status, obj.kind) then
              health_status.status = "Healthy"
              health_status.message = "Resource is up-to-date."
            return health_status
          end

          if obj.status == nil or next(obj.status) == nil or obj.status.conditions == nil then
            if obj.kind == "ProviderConfig" and obj.status.users ~= nil then
              health_status.status = "Healthy"
              health_status.message = "Resource is in use."
              return health_status
            end
            return health_status
          end

          for i, condition in ipairs(obj.status.conditions) do
            if condition.type == "LastAsyncOperation" then
              if condition.status == "False" then
                health_status.status = "Degraded"
                health_status.message = condition.message
                return health_status
              end
            end

            if condition.type == "Synced" then
              if condition.status == "False" then
                health_status.status = "Degraded"
                health_status.message = condition.message
                return health_status
              end
            end

            if contains({"Ready", "Healthy", "Offered", "Established"}, condition.type) then
              if condition.status == "True" then
                health_status.status = "Healthy"
                health_status.message = "Resource is up-to-date."
                return health_status
              end
            end
          end

          return health_status
    url: https://argocd.ctrlplane.net
extraObjects:
  - apiVersion: argoproj.io/v1alpha1
    kind: AppProject
    metadata:
      name: argocd
      namespace: argocd
    spec:
      description: Argocd Project
      sourceRepos:
        - '*'
      destinations:
        - namespace: argocd
          server: https://kubernetes.default.svc
      clusterResourceWhitelist:
        - group: '*'
          kind: '*'
      orphanedResources:
        warn: false
  - apiVersion: argoproj.io/v1alpha1
    kind: Application
    metadata:
      name: argocd
      namespace: argocd
    spec:
      destination:
        namespace: argocd
        server: https://kubernetes.default.svc
      project: argocd
      sources:
        - helm:
            valueFiles:
              - $values/argocd-install/values-override.yaml
          repoURL: https://argoproj.github.io/argo-helm
          targetRevision: 8.1.2
          chart: argo-cd
        - repoURL: https://github.com/ekwisnek/argocd.git
          ref: values
      syncPolicy:
        syncOptions:
          - CreateNamespace=true
  - apiVersion: argoproj.io/v1alpha1
    kind: Application
    metadata:
      name: argocd-apps
      namespace: argocd
    spec:
      destination:
        namespace: argocd
        server: https://kubernetes.default.svc
      project: argocd
      sources:
        - repoURL: https://github.com/ekwisnek/argocd.git
          targetRevision: HEAD
          path: argocd-apps
          directory:
            recurse: true
      syncPolicy:
        automated:
          selfHeal: true
          prune: true
  - apiVersion: argoproj.io/v1alpha1
    kind: Application
    metadata:
      name: argocd-appprojects
      namespace: argocd
    spec:
      destination:
        namespace: argocd
        server: https://kubernetes.default.svc
      project: argocd
      sources:
        - path: argocd-appprojects
          repoURL: https://github.com/ekwisnek/argocd.git
          targetRevision: HEAD
          directory:
            recurse: true
      syncPolicy:
        automated:
          selfHeal: true
          prune: true
